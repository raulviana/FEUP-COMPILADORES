/* ParserAST.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. ParserAST.java */
public class ParserAST/*@bgen(jjtree)*/implements ParserASTTreeConstants, ParserASTConstants {/*@bgen(jjtree)*/
  protected JJTParserASTState jjtree = new JJTParserASTState();
    private static final int MAX_ERRORS = 10;
    private int nErrors = 0;

    void jjtreeOpenNodeScope(Node n) {

            ((SimpleNode)n).setLine( getToken(1).beginLine ) ;
    }

    void jjtreeCloseNodeScope(Node n) {
    }

    //Used for first checkpoint (moved to jmm in src)
/*
    public static void main(String args[]) throws ParseException {
        if(args.length != 1){
            System.err.println("Usage: java Jmm <filename>");
            return;
            }
        
        try {
            ParserAST myParser = new ParserAST(new java.io.FileInputStream(args[0]));

            SimpleNode root = myParser.ParseExpression(); // returns reference to root node 
            if(myParser.nErrors > 0 ){
                throw new RuntimeException("Has errors");
            }
            root.dump(""); // prints the tree on the screen
            System.out.println("Finished Parsing");

        } 
        catch (java.io.FileNotFoundException e) {
            System.out.println("file " + args[0] + " not found.");
            return;
        }        
    }

 */

    public int getNerros() {
        return nErrors;
    }

    private void errorHandling(ParseException e, int kindToConsume, int kindNotToConsume) {

        nErrors++;

        if(nErrors > MAX_ERRORS){

            throw new RuntimeException("Reached maximum number of errors (" + MAX_ERRORS + ")!");

        }

        error_skipto(e, kindToConsume, kindNotToConsume);

    }

    private void error_skipto(ParseException e, int kindToConsume, int kindNotToConsume) {

        Token t;
        Token t1;

        boolean consumedParentesis = false;

        do {
            t1 = getToken(1);
            if (t1.kind == kindToConsume) {
                consumedParentesis = true;
            } else if (consumedParentesis || (t1.kind ==  kindNotToConsume))
                break;

            t = getNextToken();

        } while (!(t.kind == EOF));

        if(consumedParentesis)
            System.out.println("Syntactical error: " + customErrorMessage(e));  // print the error message
        else
            System.out.println("Syntactical error: Missing \")\" at line " + t1.beginLine + " and column " + t1.beginColumn + ".");



    }

    private String customErrorMessage(ParseException e) {
        StringBuffer expected = new StringBuffer();

        for (int i = 0; i < e.expectedTokenSequences.length; i++) {

            for (int j = 0; j < e.expectedTokenSequences[i].length; j++) {
                expected.append(e.tokenImage[e.expectedTokenSequences[i][j]]).append(' ');
            }

            expected.append("\n\t");
        }

        return "Encountered \"" + e.currentToken.next + "\" at line " + e.currentToken.beginLine + " and column " + e.currentToken.beginColumn + " was expecting \n\t" + expected.toString();  // print the error message
    }

  final public SimpleNode ParseExpression() throws ParseException {/*@bgen(jjtree) ParseExpression */
  ASTParseExpression jjtn000 = new ASTParseExpression(JJTPARSEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IMPORT:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        Import();
      }
      ClassDeclaration();
      jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
                                           jjtc000 = false;
                                           if (jjtree.nodeCreated()) {
                                            jjtreeCloseNodeScope(jjtn000);
                                           }
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        if (jjtree.nodeCreated()) {
         jjtreeCloseNodeScope(jjtn000);
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void ClassDeclaration() throws ParseException {/*@bgen(jjtree) ClassDeclaration */
                          ASTClassDeclaration jjtn000 = new ASTClassDeclaration(JJTCLASSDECLARATION);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
                          jjtreeOpenNodeScope(jjtn000);Token className; Token extendsClass;
    try {
      jj_consume_token(CLASS);
      className = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EXTENDS:{
        jj_consume_token(EXTENDS);
        extendsClass = jj_consume_token(IDENTIFIER);
jjtn000.ext = extendsClass.image;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      jj_consume_token(LEFT_BRACE);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:
        case INT:
        case BOOLEAN:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        VarDeclaration();
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PUBLIC:{
          ;
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        MethodDeclaration();
      }
      jj_consume_token(RIGHT_BRACE);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
jjtn000.name = className.image;
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        if (jjtree.nodeCreated()) {
         jjtreeCloseNodeScope(jjtn000);
        }
      }
    }
  }

  final public void Import() throws ParseException {/*@bgen(jjtree) Import */
                ASTImport jjtn000 = new ASTImport(JJTIMPORT);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);
                jjtreeOpenNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(IMPORT);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STATIC:{
        jj_consume_token(STATIC);
jjtn000.isStatic=true;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      t = jj_consume_token(IDENTIFIER);
jjtn000.className=t.image;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DOT:{
        jj_consume_token(DOT);
        t = jj_consume_token(IDENTIFIER);
jjtn000.methodName=t.image;
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LEFT_PARENTESIS:{
        jj_consume_token(LEFT_PARENTESIS);
        ParamList();
        jj_consume_token(RIGHT_PARENTESIS);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VOID:
        case STRING:
        case INT:
        case BOOLEAN:
        case IDENTIFIER:{
          ImportType();
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }
    }
  }

  final public void ParamList() throws ParseException {/*@bgen(jjtree) ParamList */
  ASTParamList jjtn000 = new ASTParamList(JJTPARAMLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VOID:
      case STRING:
      case INT:
      case BOOLEAN:
      case IDENTIFIER:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:
        case INT:
        case BOOLEAN:
        case IDENTIFIER:{
          Type();
          label_4:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case COLON:{
              ;
              break;
              }
            default:
              jj_la1[8] = jj_gen;
              break label_4;
            }
            jj_consume_token(COLON);
            Type();
          }
          break;
          }
        case VOID:{
          jj_consume_token(VOID);
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        if (jjtree.nodeCreated()) {
         jjtreeCloseNodeScope(jjtn000);
        }
      }
    }
  }

  final public void ImportType() throws ParseException {/*@bgen(jjtree) Type */
                           ASTType jjtn000 = new ASTType(JJTTYPE);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
                           jjtreeOpenNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:{
        t = jj_consume_token(INT);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LEFT_BRACKET:{
          jj_consume_token(LEFT_BRACKET);
          jj_consume_token(RIGHT_BRACKET);
jjtn000.isArray = true;
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          ;
        }
        break;
        }
      case BOOLEAN:{
        t = jj_consume_token(BOOLEAN);
        break;
        }
      case IDENTIFIER:{
        t = jj_consume_token(IDENTIFIER);
        break;
        }
      case STRING:{
        t = jj_consume_token(STRING);
        break;
        }
      case VOID:{
        t = jj_consume_token(VOID);
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     if (jjtree.nodeCreated()) {
      jjtreeCloseNodeScope(jjtn000);
     }
jjtn000.type = t.image;
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       if (jjtree.nodeCreated()) {
        jjtreeCloseNodeScope(jjtn000);
       }
     }
    }
  }

  final public void VarDeclaration() throws ParseException {/*@bgen(jjtree) VarDeclaration */
                         ASTVarDeclaration jjtn000 = new ASTVarDeclaration(JJTVARDECLARATION);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
                         jjtreeOpenNodeScope(jjtn000);Token t;
    try {
      Type();
      t = jj_consume_token(IDENTIFIER);
      jj_consume_token(SEMICOLON);
jjtree.closeNodeScope(jjtn000, true);
                                          jjtc000 = false;
                                          if (jjtree.nodeCreated()) {
                                           jjtreeCloseNodeScope(jjtn000);
                                          }
jjtn000.name = t.image;
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        if (jjtree.nodeCreated()) {
         jjtreeCloseNodeScope(jjtn000);
        }
      }
    }
  }

  final public void Type() throws ParseException {/*@bgen(jjtree) Type */
               ASTType jjtn000 = new ASTType(JJTTYPE);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
               jjtreeOpenNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:{
        t = jj_consume_token(INT);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LEFT_BRACKET:{
          jj_consume_token(LEFT_BRACKET);
          jj_consume_token(RIGHT_BRACKET);
jjtn000.isArray = true;
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          ;
        }
        break;
        }
      case BOOLEAN:{
        t = jj_consume_token(BOOLEAN);
        break;
        }
      case IDENTIFIER:{
        t = jj_consume_token(IDENTIFIER);
        break;
        }
      case STRING:{
        t = jj_consume_token(STRING);
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     if (jjtree.nodeCreated()) {
      jjtreeCloseNodeScope(jjtn000);
     }
jjtn000.type = t.image;
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       if (jjtree.nodeCreated()) {
        jjtreeCloseNodeScope(jjtn000);
       }
     }
    }
  }

  final public void MethodDeclaration() throws ParseException {Token t;
    jj_consume_token(PUBLIC);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STATIC:{
ASTMainDeclaration jjtn001 = new ASTMainDeclaration(JJTMAINDECLARATION);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtreeOpenNodeScope(jjtn001);
      try {
        jj_consume_token(STATIC);
        jj_consume_token(VOID);
        jj_consume_token(MAIN);
        jj_consume_token(LEFT_PARENTESIS);
        jj_consume_token(STRING);
        jj_consume_token(LEFT_BRACKET);
        jj_consume_token(RIGHT_BRACKET);
        t = jj_consume_token(IDENTIFIER);
jjtn001.parametherName = t.image;
        jj_consume_token(RIGHT_PARENTESIS);
        jj_consume_token(LEFT_BRACE);
        label_5:
        while (true) {
          if (jj_2_1(2)) {
            ;
          } else {
            break label_5;
          }
          VarDeclaration();
        }
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case IF:
          case WHILE:
          case TRUE_:
          case FALSE_:
          case THIS:
          case NEW:
          case INTEGER_LITERAL:
          case IDENTIFIER:
          case LEFT_BRACE:
          case LEFT_PARENTESIS:
          case NEGATION:{
            ;
            break;
            }
          default:
            jj_la1[15] = jj_gen;
            break label_6;
          }
          Statement();
        }
        jj_consume_token(RIGHT_BRACE);
      } catch (Throwable jjte001) {
if (jjtc001) {
         jjtree.clearNodeScope(jjtn001);
         jjtc001 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte001 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte001;}
       }
       if (jjte001 instanceof ParseException) {
         {if (true) throw (ParseException)jjte001;}
       }
       {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         if (jjtree.nodeCreated()) {
          jjtreeCloseNodeScope(jjtn001);
         }
       }
      }
      break;
      }
    case STRING:
    case INT:
    case BOOLEAN:
    case IDENTIFIER:{
ASTMethodDeclaration jjtn003 = new ASTMethodDeclaration(JJTMETHODDECLARATION);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
      jjtreeOpenNodeScope(jjtn003);
      try {
        Type();
        t = jj_consume_token(IDENTIFIER);
        jj_consume_token(LEFT_PARENTESIS);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:
        case INT:
        case BOOLEAN:
        case IDENTIFIER:{
          Paramethers();
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          ;
        }
        jj_consume_token(RIGHT_PARENTESIS);
        jj_consume_token(LEFT_BRACE);
        label_7:
        while (true) {
          if (jj_2_2(2)) {
            ;
          } else {
            break label_7;
          }
          VarDeclaration();
        }
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case IF:
          case WHILE:
          case TRUE_:
          case FALSE_:
          case THIS:
          case NEW:
          case INTEGER_LITERAL:
          case IDENTIFIER:
          case LEFT_BRACE:
          case LEFT_PARENTESIS:
          case NEGATION:{
            ;
            break;
            }
          default:
            jj_la1[17] = jj_gen;
            break label_8;
          }
          Statement();
        }
ASTReturn jjtn002 = new ASTReturn(JJTRETURN);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
          jjtreeOpenNodeScope(jjtn002);
        try {
          jj_consume_token(RETURN);
          Expression();
          jj_consume_token(SEMICOLON);
        } catch (Throwable jjte002) {
if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte002;}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) throw (ParseException)jjte002;}
          }
          {if (true) throw (Error)jjte002;}
        } finally {
if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn002);
            }
          }
        }
        jj_consume_token(RIGHT_BRACE);
jjtree.closeNodeScope(jjtn003, true);
                    jjtc003 = false;
                    if (jjtree.nodeCreated()) {
                     jjtreeCloseNodeScope(jjtn003);
                    }
jjtn003.name = t.image;
      } catch (Throwable jjte003) {
if (jjtc003) {
        jjtree.clearNodeScope(jjtn003);
        jjtc003 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte003 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte003;}
      }
      if (jjte003 instanceof ParseException) {
        {if (true) throw (ParseException)jjte003;}
      }
      {if (true) throw (Error)jjte003;}
      } finally {
if (jjtc003) {
        jjtree.closeNodeScope(jjtn003, true);
        if (jjtree.nodeCreated()) {
         jjtreeCloseNodeScope(jjtn003);
        }
      }
      }
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Paramethers() throws ParseException {
    Arg();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COLON:{
        ;
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        break label_9;
      }
      jj_consume_token(COLON);
      Arg();
    }
  }

  final public void Arg() throws ParseException {/*@bgen(jjtree) Arg */
              ASTArg jjtn000 = new ASTArg(JJTARG);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);
              jjtreeOpenNodeScope(jjtn000);Token t;
    try {
      Type();
      t = jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                            if (jjtree.nodeCreated()) {
                             jjtreeCloseNodeScope(jjtn000);
                            }
jjtn000.val = t.image;
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        if (jjtree.nodeCreated()) {
         jjtreeCloseNodeScope(jjtn000);
        }
      }
    }
  }

  final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LEFT_BRACE:{
ASTStatementBlock jjtn001 = new ASTStatementBlock(JJTSTATEMENTBLOCK);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
        jj_consume_token(LEFT_BRACE);
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case IF:
          case WHILE:
          case TRUE_:
          case FALSE_:
          case THIS:
          case NEW:
          case INTEGER_LITERAL:
          case IDENTIFIER:
          case LEFT_BRACE:
          case LEFT_PARENTESIS:
          case NEGATION:{
            ;
            break;
            }
          default:
            jj_la1[20] = jj_gen;
            break label_10;
          }
          Statement();
        }
        jj_consume_token(RIGHT_BRACE);
      } catch (Throwable jjte001) {
if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        if (jjtree.nodeCreated()) {
         jjtreeCloseNodeScope(jjtn001);
        }
      }
      }
      break;
      }
    case IF:{
      If();
      break;
      }
    case WHILE:{
      While();
      break;
      }
    case TRUE_:
    case FALSE_:
    case THIS:
    case NEW:
    case INTEGER_LITERAL:
    case IDENTIFIER:
    case LEFT_PARENTESIS:
    case NEGATION:{
      if (jj_2_3(2)) {
        Equality();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TRUE_:
        case FALSE_:
        case THIS:
        case NEW:
        case INTEGER_LITERAL:
        case IDENTIFIER:
        case LEFT_PARENTESIS:
        case NEGATION:{
          Expression();
          jj_consume_token(SEMICOLON);
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Conditional() throws ParseException {
    jj_consume_token(LEFT_PARENTESIS);
    Expression();
    jj_consume_token(RIGHT_PARENTESIS);
  }

  final public void If() throws ParseException {/*@bgen(jjtree) If */
  ASTIf jjtn000 = new ASTIf(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      Conditional();
      Statement();
      jj_consume_token(ELSE);
      Statement();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        if (jjtree.nodeCreated()) {
         jjtreeCloseNodeScope(jjtn000);
        }
      }
    }
  }

  final public void While() throws ParseException {/*@bgen(jjtree) While */
  ASTWhile jjtn000 = new ASTWhile(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(WHILE);
      try {
        Conditional();
      } catch (ParseException e) {
errorHandling(e, RIGHT_PARENTESIS, LEFT_BRACE);
      }
      Statement();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        if (jjtree.nodeCreated()) {
         jjtreeCloseNodeScope(jjtn000);
        }
      }
    }
  }

  final public void Equality() throws ParseException {/*@bgen(jjtree) Equality */
                   ASTEquality jjtn000 = new ASTEquality(JJTEQUALITY);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
                   jjtreeOpenNodeScope(jjtn000);Token t;
    try {
ASTIdentifier jjtn002 = new ASTIdentifier(JJTIDENTIFIER);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      jjtreeOpenNodeScope(jjtn002);
      try {
        t = jj_consume_token(IDENTIFIER);
jjtn002.val = t.image;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LEFT_BRACKET:{
ASTaccessToArray jjtn001 = new ASTaccessToArray(JJTACCESSTOARRAY);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtreeOpenNodeScope(jjtn001);
          try {
            accessToArray();
          } catch (Throwable jjte001) {
if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte001;}
           }
           if (jjte001 instanceof ParseException) {
             {if (true) throw (ParseException)jjte001;}
           }
           {if (true) throw (Error)jjte001;}
          } finally {
if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             if (jjtree.nodeCreated()) {
              jjtreeCloseNodeScope(jjtn001);
             }
           }
          }
          break;
          }
        default:
          jj_la1[23] = jj_gen;
          ;
        }
      } catch (Throwable jjte002) {
if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte002;}
      }
      if (jjte002 instanceof ParseException) {
        {if (true) throw (ParseException)jjte002;}
      }
      {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
        if (jjtree.nodeCreated()) {
         jjtreeCloseNodeScope(jjtn002);
        }
      }
      }
      jj_consume_token(ASSIGN);
      Expression();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        if (jjtree.nodeCreated()) {
         jjtreeCloseNodeScope(jjtn000);
        }
      }
    }
  }

  final public void Expression() throws ParseException {
    AND();
  }

  final public void AND() throws ParseException {
    LessThan();
    label_11:
    while (true) {
      if (jj_2_4(2)) {
        ;
      } else {
        break label_11;
      }
      jj_consume_token(AND);
ASTAND jjtn001 = new ASTAND(JJTAND);
                                      boolean jjtc001 = true;
                                      jjtree.openNodeScope(jjtn001);
                                      jjtreeOpenNodeScope(jjtn001);
      try {
        LessThan();
      } catch (Throwable jjte001) {
if (jjtc001) {
                                        jjtree.clearNodeScope(jjtn001);
                                        jjtc001 = false;
                                      } else {
                                        jjtree.popNode();
                                      }
                                      if (jjte001 instanceof RuntimeException) {
                                        {if (true) throw (RuntimeException)jjte001;}
                                      }
                                      if (jjte001 instanceof ParseException) {
                                        {if (true) throw (ParseException)jjte001;}
                                      }
                                      {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                                        jjtree.closeNodeScope(jjtn001,  2);
                                        if (jjtree.nodeCreated()) {
                                         jjtreeCloseNodeScope(jjtn001);
                                        }
                                      }
      }
    }
  }

  final public void LessThan() throws ParseException {
    Sum();
    label_12:
    while (true) {
      if (jj_2_5(2)) {
        ;
      } else {
        break label_12;
      }
      jj_consume_token(LESS_THAN);
ASTLESSTHAN jjtn001 = new ASTLESSTHAN(JJTLESSTHAN);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
                                       jjtreeOpenNodeScope(jjtn001);
      try {
        Sum();
      } catch (Throwable jjte001) {
if (jjtc001) {
                                         jjtree.clearNodeScope(jjtn001);
                                         jjtc001 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte001 instanceof RuntimeException) {
                                         {if (true) throw (RuntimeException)jjte001;}
                                       }
                                       if (jjte001 instanceof ParseException) {
                                         {if (true) throw (ParseException)jjte001;}
                                       }
                                       {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001,  2);
                                         if (jjtree.nodeCreated()) {
                                          jjtreeCloseNodeScope(jjtn001);
                                         }
                                       }
      }
    }
  }

  final public void Sum() throws ParseException {
    Sub();
    label_13:
    while (true) {
      if (jj_2_6(2)) {
        ;
      } else {
        break label_13;
      }
      jj_consume_token(SUM);
ASTSUM jjtn001 = new ASTSUM(JJTSUM);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
                                 jjtreeOpenNodeScope(jjtn001);
      try {
        Sub();
      } catch (Throwable jjte001) {
if (jjtc001) {
                                   jjtree.clearNodeScope(jjtn001);
                                   jjtc001 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte001 instanceof RuntimeException) {
                                   {if (true) throw (RuntimeException)jjte001;}
                                 }
                                 if (jjte001 instanceof ParseException) {
                                   {if (true) throw (ParseException)jjte001;}
                                 }
                                 {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001,  2);
                                   if (jjtree.nodeCreated()) {
                                    jjtreeCloseNodeScope(jjtn001);
                                   }
                                 }
      }
    }
  }

  final public void Sub() throws ParseException {
    Mul();
    label_14:
    while (true) {
      if (jj_2_7(2)) {
        ;
      } else {
        break label_14;
      }
      jj_consume_token(SUB);
ASTSUB jjtn001 = new ASTSUB(JJTSUB);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
                                  jjtreeOpenNodeScope(jjtn001);
      try {
        Mul();
      } catch (Throwable jjte001) {
if (jjtc001) {
                                    jjtree.clearNodeScope(jjtn001);
                                    jjtc001 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte001 instanceof RuntimeException) {
                                    {if (true) throw (RuntimeException)jjte001;}
                                  }
                                  if (jjte001 instanceof ParseException) {
                                    {if (true) throw (ParseException)jjte001;}
                                  }
                                  {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001,  2);
                                    if (jjtree.nodeCreated()) {
                                     jjtreeCloseNodeScope(jjtn001);
                                    }
                                  }
      }
    }
  }

  final public void Mul() throws ParseException {
    Div();
    label_15:
    while (true) {
      if (jj_2_8(2)) {
        ;
      } else {
        break label_15;
      }
      jj_consume_token(MUL);
ASTMUL jjtn001 = new ASTMUL(JJTMUL);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
                                 jjtreeOpenNodeScope(jjtn001);
      try {
        Div();
      } catch (Throwable jjte001) {
if (jjtc001) {
                                   jjtree.clearNodeScope(jjtn001);
                                   jjtc001 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte001 instanceof RuntimeException) {
                                   {if (true) throw (RuntimeException)jjte001;}
                                 }
                                 if (jjte001 instanceof ParseException) {
                                   {if (true) throw (ParseException)jjte001;}
                                 }
                                 {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001,  2);
                                   if (jjtree.nodeCreated()) {
                                    jjtreeCloseNodeScope(jjtn001);
                                   }
                                 }
      }
    }
  }

  final public void Div() throws ParseException {
    DotExpression();
    label_16:
    while (true) {
      if (jj_2_9(2)) {
        ;
      } else {
        break label_16;
      }
      jj_consume_token(DIV);
ASTDIV jjtn001 = new ASTDIV(JJTDIV);
                                            boolean jjtc001 = true;
                                            jjtree.openNodeScope(jjtn001);
                                            jjtreeOpenNodeScope(jjtn001);
      try {
        DotExpression();
      } catch (Throwable jjte001) {
if (jjtc001) {
                                              jjtree.clearNodeScope(jjtn001);
                                              jjtc001 = false;
                                            } else {
                                              jjtree.popNode();
                                            }
                                            if (jjte001 instanceof RuntimeException) {
                                              {if (true) throw (RuntimeException)jjte001;}
                                            }
                                            if (jjte001 instanceof ParseException) {
                                              {if (true) throw (ParseException)jjte001;}
                                            }
                                            {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                                              jjtree.closeNodeScope(jjtn001,  2);
                                              if (jjtree.nodeCreated()) {
                                               jjtreeCloseNodeScope(jjtn001);
                                              }
                                            }
      }
    }
  }

  final public void DotExpression() throws ParseException {Token t;
    FinalExpression();
    if (jj_2_10(2)) {
ASTDotExpression jjtn002 = new ASTDotExpression(JJTDOTEXPRESSION);
                                      boolean jjtc002 = true;
                                      jjtree.openNodeScope(jjtn002);
                                      jjtreeOpenNodeScope(jjtn002);
      try {
ASTIdentifier jjtn001 = new ASTIdentifier(JJTIDENTIFIER);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
                                       jjtreeOpenNodeScope(jjtn001);
        try {
          jj_consume_token(DOT);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case IDENTIFIER:{
            t = jj_consume_token(IDENTIFIER);
            break;
            }
          case LENGTH:{
            t = jj_consume_token(LENGTH);
            break;
            }
          default:
            jj_la1[24] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
jjtn001.val = t.image;
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LEFT_PARENTESIS:{
            jj_consume_token(LEFT_PARENTESIS);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case TRUE_:
            case FALSE_:
            case THIS:
            case NEW:
            case INTEGER_LITERAL:
            case IDENTIFIER:
            case LEFT_PARENTESIS:
            case NEGATION:{
              Expression();
              label_17:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case COLON:{
                  ;
                  break;
                  }
                default:
                  jj_la1[25] = jj_gen;
                  break label_17;
                }
                jj_consume_token(COLON);
                Expression();
              }
              break;
              }
            default:
              jj_la1[26] = jj_gen;
              ;
            }
            jj_consume_token(RIGHT_PARENTESIS);
jjtn001.method = true;
            break;
            }
          default:
            jj_la1[27] = jj_gen;
            ;
          }
        } catch (Throwable jjte001) {
if (jjtc001) {
                                         jjtree.clearNodeScope(jjtn001);
                                         jjtc001 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte001 instanceof RuntimeException) {
                                         {if (true) throw (RuntimeException)jjte001;}
                                       }
                                       if (jjte001 instanceof ParseException) {
                                         {if (true) throw (ParseException)jjte001;}
                                       }
                                       {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001, true);
                                         if (jjtree.nodeCreated()) {
                                          jjtreeCloseNodeScope(jjtn001);
                                         }
                                       }
        }
      } catch (Throwable jjte002) {
if (jjtc002) {
                                        jjtree.clearNodeScope(jjtn002);
                                        jjtc002 = false;
                                      } else {
                                        jjtree.popNode();
                                      }
                                      if (jjte002 instanceof RuntimeException) {
                                        {if (true) throw (RuntimeException)jjte002;}
                                      }
                                      if (jjte002 instanceof ParseException) {
                                        {if (true) throw (ParseException)jjte002;}
                                      }
                                      {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
                                        jjtree.closeNodeScope(jjtn002,  2);
                                        if (jjtree.nodeCreated()) {
                                         jjtreeCloseNodeScope(jjtn002);
                                        }
                                      }
      }
    } else {
      ;
    }
  }

  final public void FinalExpression() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NEW:{
      New();
      break;
      }
    case IDENTIFIER:{
ASTIdentifier jjtn002 = new ASTIdentifier(JJTIDENTIFIER);
         boolean jjtc002 = true;
         jjtree.openNodeScope(jjtn002);
         jjtreeOpenNodeScope(jjtn002);
      try {
        t = jj_consume_token(IDENTIFIER);
jjtn002.val = t.image;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LEFT_BRACKET:{
ASTaccessToArray jjtn001 = new ASTaccessToArray(JJTACCESSTOARRAY);
                                                     boolean jjtc001 = true;
                                                     jjtree.openNodeScope(jjtn001);
                                                     jjtreeOpenNodeScope(jjtn001);
          try {
            accessToArray();
          } catch (Throwable jjte001) {
if (jjtc001) {
                                                       jjtree.clearNodeScope(jjtn001);
                                                       jjtc001 = false;
                                                     } else {
                                                       jjtree.popNode();
                                                     }
                                                     if (jjte001 instanceof RuntimeException) {
                                                       {if (true) throw (RuntimeException)jjte001;}
                                                     }
                                                     if (jjte001 instanceof ParseException) {
                                                       {if (true) throw (ParseException)jjte001;}
                                                     }
                                                     {if (true) throw (Error)jjte001;}
          } finally {
if (jjtc001) {
                                                       jjtree.closeNodeScope(jjtn001, true);
                                                       if (jjtree.nodeCreated()) {
                                                        jjtreeCloseNodeScope(jjtn001);
                                                       }
                                                     }
          }
          break;
          }
        default:
          jj_la1[28] = jj_gen;
          ;
        }
      } catch (Throwable jjte002) {
if (jjtc002) {
           jjtree.clearNodeScope(jjtn002);
           jjtc002 = false;
         } else {
           jjtree.popNode();
         }
         if (jjte002 instanceof RuntimeException) {
           {if (true) throw (RuntimeException)jjte002;}
         }
         if (jjte002 instanceof ParseException) {
           {if (true) throw (ParseException)jjte002;}
         }
         {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
           jjtree.closeNodeScope(jjtn002, true);
           if (jjtree.nodeCreated()) {
            jjtreeCloseNodeScope(jjtn002);
           }
         }
      }
      break;
      }
    case THIS:{
      t = jj_consume_token(THIS);
ASTIdentifier jjtn003 = new ASTIdentifier(JJTIDENTIFIER);
                    boolean jjtc003 = true;
                    jjtree.openNodeScope(jjtn003);
                    jjtreeOpenNodeScope(jjtn003);
      try {
jjtree.closeNodeScope(jjtn003, true);
                    jjtc003 = false;
                    if (jjtree.nodeCreated()) {
                     jjtreeCloseNodeScope(jjtn003);
                    }
jjtn003.val = t.image;
      } finally {
if (jjtc003) {
                      jjtree.closeNodeScope(jjtn003, true);
                      if (jjtree.nodeCreated()) {
                       jjtreeCloseNodeScope(jjtn003);
                      }
                    }
      }
      break;
      }
    case TRUE_:
    case FALSE_:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRUE_:{
        t = jj_consume_token(TRUE_);
        break;
        }
      case FALSE_:{
        t = jj_consume_token(FALSE_);
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
ASTBoolean jjtn004 = new ASTBoolean(JJTBOOLEAN);
                                      boolean jjtc004 = true;
                                      jjtree.openNodeScope(jjtn004);
                                      jjtreeOpenNodeScope(jjtn004);
      try {
jjtree.closeNodeScope(jjtn004, true);
                                      jjtc004 = false;
                                      if (jjtree.nodeCreated()) {
                                       jjtreeCloseNodeScope(jjtn004);
                                      }
jjtn004.val = t.image.equals("true") ;
      } finally {
if (jjtc004) {
                                        jjtree.closeNodeScope(jjtn004, true);
                                        if (jjtree.nodeCreated()) {
                                         jjtreeCloseNodeScope(jjtn004);
                                        }
                                      }
      }
      break;
      }
    case INTEGER_LITERAL:{
      t = jj_consume_token(INTEGER_LITERAL);
ASTLiteral jjtn005 = new ASTLiteral(JJTLITERAL);
                               boolean jjtc005 = true;
                               jjtree.openNodeScope(jjtn005);
                               jjtreeOpenNodeScope(jjtn005);
      try {
jjtree.closeNodeScope(jjtn005, true);
                               jjtc005 = false;
                               if (jjtree.nodeCreated()) {
                                jjtreeCloseNodeScope(jjtn005);
                               }
jjtn005.val = t.image;
      } finally {
if (jjtc005) {
                                 jjtree.closeNodeScope(jjtn005, true);
                                 if (jjtree.nodeCreated()) {
                                  jjtreeCloseNodeScope(jjtn005);
                                 }
                               }
      }
      break;
      }
    case NEGATION:{
ASTNegation jjtn006 = new ASTNegation(JJTNEGATION);
        boolean jjtc006 = true;
        jjtree.openNodeScope(jjtn006);
        jjtreeOpenNodeScope(jjtn006);
      try {
        jj_consume_token(NEGATION);
        DotExpression();
      } catch (Throwable jjte006) {
if (jjtc006) {
          jjtree.clearNodeScope(jjtn006);
          jjtc006 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte006 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte006;}
        }
        if (jjte006 instanceof ParseException) {
          {if (true) throw (ParseException)jjte006;}
        }
        {if (true) throw (Error)jjte006;}
      } finally {
if (jjtc006) {
          jjtree.closeNodeScope(jjtn006, true);
          if (jjtree.nodeCreated()) {
           jjtreeCloseNodeScope(jjtn006);
          }
        }
      }
      break;
      }
    case LEFT_PARENTESIS:{
      jj_consume_token(LEFT_PARENTESIS);
      Expression();
      jj_consume_token(RIGHT_PARENTESIS);
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void New() throws ParseException {
    jj_consume_token(NEW);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:{
      InitializeArray();
      break;
      }
    case IDENTIFIER:{
      NewObject();
      break;
      }
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void InitializeArray() throws ParseException {/*@bgen(jjtree) InitializeArray */
  ASTInitializeArray jjtn000 = new ASTInitializeArray(JJTINITIALIZEARRAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(INT);
      accessToArray();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        if (jjtree.nodeCreated()) {
         jjtreeCloseNodeScope(jjtn000);
        }
      }
    }
  }

  final public void NewObject() throws ParseException {/*@bgen(jjtree) NewObject */
                    ASTNewObject jjtn000 = new ASTNewObject(JJTNEWOBJECT);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
                    jjtreeOpenNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
      jj_consume_token(LEFT_PARENTESIS);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRUE_:
      case FALSE_:
      case THIS:
      case NEW:
      case INTEGER_LITERAL:
      case IDENTIFIER:
      case LEFT_PARENTESIS:
      case NEGATION:{
        Expression();
        label_18:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COLON:{
            ;
            break;
            }
          default:
            jj_la1[32] = jj_gen;
            break label_18;
          }
          jj_consume_token(COLON);
          Expression();
        }
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        ;
      }
      jj_consume_token(RIGHT_PARENTESIS);
jjtree.closeNodeScope(jjtn000, true);
                                                                                                    jjtc000 = false;
                                                                                                    if (jjtree.nodeCreated()) {
                                                                                                     jjtreeCloseNodeScope(jjtn000);
                                                                                                    }
jjtn000.val = t.image;
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        if (jjtree.nodeCreated()) {
         jjtreeCloseNodeScope(jjtn000);
        }
      }
    }
  }

  final public void accessToArray() throws ParseException {
    jj_consume_token(LEFT_BRACKET);
    Expression();
    jj_consume_token(RIGHT_BRACKET);
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_3R_23()
 {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_scan_token(LESS_THAN)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_30()
 {
    if (jj_scan_token(INT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_27()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_22()
 {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_31()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_19()
 {
    if (jj_3R_27()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_21()
 {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_40()
 {
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_scan_token(DOT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) return true;
    }
    return false;
  }

  private boolean jj_3R_28()
 {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_38()
 {
    if (jj_scan_token(LEFT_PARENTESIS)) return true;
    return false;
  }

  private boolean jj_3R_37()
 {
    if (jj_scan_token(NEGATION)) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_scan_token(DIV)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_36()
 {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_35()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) return true;
    }
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_34()
 {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_33()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_20()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) jj_scanpos = xsp;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_32()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_29()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_26()
 {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_scan_token(MUL)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_39()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_25()
 {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_scan_token(SUB)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_24()
 {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_scan_token(SUM)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ParserASTTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[34];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80,0x200,0x80038000,0x400,0x1000,0x0,0x8003a000,0x0,0x0,0x8003a000,0x8003a000,0x0,0x8003a000,0x0,0x80038000,0x87d40000,0x80038000,0x87d40000,0x80039000,0x0,0x87d40000,0x87c00000,0x87d40000,0x0,0x80200000,0x0,0x87c00000,0x0,0x0,0xc00000,0x87c00000,0x80010000,0x0,0x87c00000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x100,0x8,0x0,0x0,0x40,0x0,0x40,0x0,0x20110,0x0,0x20110,0x0,0x8,0x20110,0x20100,0x20110,0x40,0x0,0x8,0x20100,0x100,0x40,0x0,0x20100,0x0,0x8,0x20100,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[10];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ParserAST(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ParserAST(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserASTTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ParserAST(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserASTTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
      jj_input_stream = new SimpleCharStream(stream, 1, 1);
   } else {
      jj_input_stream.ReInit(stream, 1, 1);
   }
   if (token_source == null) {
      token_source = new ParserASTTokenManager(jj_input_stream);
   }

    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ParserAST(ParserASTTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserASTTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) {
       return;
    }

    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];

      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }

      for (int[] oldentry : jj_expentries) {
        if (oldentry.length == jj_expentry.length) {
          boolean isMatched = true;

          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              isMatched = false;
              break;
            }

          }
          if (isMatched) {
            jj_expentries.add(jj_expentry);
            break;
          }
        }
      }

      if (pos != 0) {
        jj_lasttokens[(jj_endpos = pos) - 1] = kind;
      }
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[51];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 34; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 51; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 10; i++) {
      try {
        JJCalls p = jj_2_rtns[i];

        do {
          if (p.gen > jj_gen) {
            jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
            switch (i) {
              case 0: jj_3_1(); break;
              case 1: jj_3_2(); break;
              case 2: jj_3_3(); break;
              case 3: jj_3_4(); break;
              case 4: jj_3_5(); break;
              case 5: jj_3_6(); break;
              case 6: jj_3_7(); break;
              case 7: jj_3_8(); break;
              case 8: jj_3_9(); break;
              case 9: jj_3_10(); break;
            }
          }
          p = p.next;
        } while (p != null);

        } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }

    p.gen = jj_gen + xla - jj_la; 
    p.first = token;
    p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
