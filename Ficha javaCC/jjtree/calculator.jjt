options
{
    LOOKAHEAD=1;
}

PARSER_BEGIN(calculator)



public class calculator
{
    public static void main(String args[]) throws ParseException {
        System.out.println("Parser for a calculator with integers and -, +, *, /, ( and )");
        System.out.println("Write an aritmetic expression: ");
        calculator mycalc = new calculator(System.in);
        SimpleNode root = mycalc.Expression();

        root.dump("");
        System.out.println("Espression value: "+mycalc.eval(root));
       
    }

    int eval(SimpleNode node) {
if(node.jjtGetNumChildren() == 0) // leaf node with integer value
return node.val;
else if(node.jjtGetNumChildren() == 1) // only one child
return this.eval((SimpleNode) node.jjtGetChild(0));
SimpleNode lhs = (SimpleNode) node.jjtGetChild(0); //left child
SimpleNode rhs = (SimpleNode) node.jjtGetChild(1); // right child
switch(node.Op) {
 case MyConstants.ADD : return eval( lhs ) + eval( rhs );
 case MyConstants.SUB : return eval( lhs ) - eval( rhs );
 case MyConstants.MUL : return eval( lhs ) * eval( rhs );
 case MyConstants.DIV : return eval( lhs ) / eval( rhs );
 default : // abort
System.out.println("Ilegal operator!");
System.exit(1);
}
return 0;
}
}


PARSER_END(calculator)

SKIP :
{
    "" | "\r" | "\t"
}

TOKEN :
{
    < INTEGER: (["0"-"9"])+ > | < LF: "\n" >
}

SimpleNode Expression(): {}
{
    Expr1() <LF> {return jjtThis;}
}

void Expr1(): {}
{
    Expr2(1) 
    [
        ("+" {jjtThis.Op = MyConstants.ADD;}
        | "-" {jjtThis.Op = MyConstants.SUB;}
        )
        Expr2(1)
    ]
}

void Expr2(int sign): {}
{
    Expr3(sign) 
    [
        ("*" {jjtThis.Op = MyConstants.MUL;}
        | "/" {jjtThis.Op = MyConstants.DIV;}
        )
        Expr3(1)
    ]
}

void Expr3(int sign): {Token t;}
{
    t = <INTEGER> 
    {
        jjtThis.val = sign *Integer.parseInt(t.image);
    }
    | "-" Expr3(-1) 
    | "(" Expr1() ")"
}