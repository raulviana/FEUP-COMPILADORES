/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. ParserAST.jj */
/*@egen*/options
{
    LOOKAHEAD=1;
               
    STATIC=false;
                         
}

PARSER_BEGIN(ParserAST)
public class ParserAST/*@bgen(jjtree)*/implements ParserASTTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTParserASTState jjtree = new JJTParserASTState();

/*@egen*/

    private static final int MAX_ERRORS = 10;
    private int nErrors = 0;

    void jjtreeOpenNodeScope(Node n) {

            ((SimpleNode)n).setLine( getToken(1).beginLine ) ;
    }

    void jjtreeCloseNodeScope(Node n) {
    }

    //Used for first checkpoint (moved to jmm in src)
/*
    public static void main(String args[]) throws ParseException {
        if(args.length != 1){
            System.err.println("Usage: java Jmm <filename>");
            return;
            }
        
        try {
            ParserAST myParser = new ParserAST(new java.io.FileInputStream(args[0]));

            SimpleNode root = myParser.ParseExpression(); // returns reference to root node 
            if(myParser.nErrors > 0 ){
                throw new RuntimeException("Has errors");
            }
            root.dump(""); // prints the tree on the screen
            System.out.println("Finished Parsing");

        } 
        catch (java.io.FileNotFoundException e) {
            System.out.println("file " + args[0] + " not found.");
            return;
        }        
    }

 */

    public int getNerros() {
        return nErrors;
    }

    private void errorHandling(ParseException e, int kindToConsume, int kindNotToConsume) {

        nErrors++;

        if(nErrors > MAX_ERRORS){

            throw new RuntimeException("Reached maximum number of errors (" + MAX_ERRORS + ")!");
            
        }

        error_skipto(e, kindToConsume, kindNotToConsume);

    }

    private void error_skipto(ParseException e, int kindToConsume, int kindNotToConsume) {
    
        Token t;
        Token t1;

        boolean consumedParentesis = false;

        do {
            t1 = getToken(1);
            if (t1.kind == kindToConsume) {
                consumedParentesis = true;
            } else if (consumedParentesis || (t1.kind ==  kindNotToConsume))
                break;

            t = getNextToken();
        
        } while (!(t.kind == EOF));

        if(consumedParentesis)
            System.out.println("Syntactical error: " + customErrorMessage(e));  // print the error message
        else
            System.out.println("Syntactical error: Missing \")\" at line " + t1.beginLine + " and column " + t1.beginColumn + ".");
                    


    }

    private String customErrorMessage(ParseException e) {
        StringBuffer expected = new StringBuffer();

        for (int i = 0; i < e.expectedTokenSequences.length; i++) {

            for (int j = 0; j < e.expectedTokenSequences[i].length; j++) {
                expected.append(e.tokenImage[e.expectedTokenSequences[i][j]]).append(' ');
            }

            expected.append("\n\t");
        }

        return "Encountered \"" + e.currentToken.next + "\" at line " + e.currentToken.beginLine + " and column " + e.currentToken.beginColumn + " was expecting \n\t" + expected.toString();  // print the error message
    }
}

PARSER_END(ParserAST)


/* Caracters to be skiped */
SKIP:
{
    " " | "\r" | "\t" | "\n" 
    | <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")> |         /* Inline comments */
    <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">    /* Block comments */
}

/*Reserved Words*/
TOKEN :
{
    <IMPORT: "import">
    | <CLASS: "class" >
    | <EXTENDS: "extends">
    | <PUBLIC: "public">
    | <RETURN: "return">
    | <STATIC: "static">
    | <VOID: "void">
    | <MAIN: "main">
    | <STRING: "String">
    | <INT: "int">
    | <BOOLEAN: "boolean">
    | <IF: "if">
    | <ELSE: "else">
    | <WHILE: "while">
    | <LENGTH: "length">
    | <TRUE_: "true">
    | <FALSE_: "false">
    | <THIS: "this">
    | <NEW: "new">
}

/*Identifier and IntegerLiteral*/
TOKEN:
{
    /*IntegerLiteral*/
     < INTEGER_LITERAL : <DECIMAL> | <HEXADECIMAL> | <BINARY> | <OCTAL> > 
   | < #DECIMAL: (["0"-"9"])+ > 
   | < #HEXADECIMAL: ("0x" | "0X")(["0"-"9", "A"-"F", "a"-"f"])+ > 
   | < #BINARY: ("0b" | "0B")(["0", "1"])+ > 
   | < #OCTAL: "0"(["0"-"7"])* > 

   /*Identifier*/
   | < IDENTIFIER : <LETTER> (<LETTER> | <DIGIT>)* > 
   | < #LETTER : ["$", "_", "a"-"z", "A"-"Z"] > 
   | < #DIGIT : ["0"-"9"] >
    
}

/* Delimitaters*/
TOKEN : {
    < SEMICOLON: ";">
    | < COLON: ",">
    | < LEFT_BRACE: "{">
    | < RIGHT_BRACE: "}">
    | < LEFT_BRACKET: "[">
    | < RIGHT_BRACKET: "]">
    | < LEFT_PARENTESIS: "(">
    | < RIGHT_PARENTESIS: ")">
    | < DOT: ".">
}

/*Operators*/
TOKEN : {
    <SUM: "+">
    | <SUB: "-">
    | <MUL: "*">
    | <DIV: "/">
    | <LESS_THAN: "<">
    | <AND: "&&"> 
    | <NEGATION: "!">
    | <ASSIGN: "=">
}

SimpleNode ParseExpression(): {/*@bgen(jjtree) ParseExpression */
  ASTParseExpression jjtn000 = new ASTParseExpression(JJTPARSEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ParseExpression */
    try {
/*@egen*/
    (Import())* ClassDeclaration() <EOF>/*@bgen(jjtree)*/
                                         {
                                           jjtree.closeNodeScope(jjtn000, true);
                                           jjtc000 = false;
                                           if (jjtree.nodeCreated()) {
                                            jjtreeCloseNodeScope(jjtn000);
                                           }
                                         }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        if (jjtree.nodeCreated()) {
         jjtreeCloseNodeScope(jjtn000);
        }
      }
    }
/*@egen*/ //Java code inside brackets

}

void ClassDeclaration(): {/*@bgen(jjtree) ClassDeclaration */
                          ASTClassDeclaration jjtn000 = new ASTClassDeclaration(JJTCLASSDECLARATION);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
                          jjtreeOpenNodeScope(jjtn000);
/*@egen*/Token className; Token extendsClass;} {/*@bgen(jjtree) ClassDeclaration */
    try {
/*@egen*/

    <CLASS> className = <IDENTIFIER> (<EXTENDS> extendsClass = <IDENTIFIER>  {jjtn000.ext = extendsClass.image;})?
    <LEFT_BRACE> 
        ( VarDeclaration() )*
        ( MethodDeclaration() )*
    <RIGHT_BRACE>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
    { jjtn000.name = className.image; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        if (jjtree.nodeCreated()) {
         jjtreeCloseNodeScope(jjtn000);
        }
      }
    }
/*@egen*/

}

void Import(): {/*@bgen(jjtree) Import */
                ASTImport jjtn000 = new ASTImport(JJTIMPORT);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);
                jjtreeOpenNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) Import */
  try {
/*@egen*/
  "import" ["static" {jjtn000.isStatic=true; }] t=<IDENTIFIER>{jjtn000.className=t.image;}
      [<DOT> t=<IDENTIFIER> {jjtn000.methodName=t.image; }] [<LEFT_PARENTESIS> ParamList() <RIGHT_PARENTESIS>
      [ImportType()]] <SEMICOLON>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }
  }
/*@egen*/
}

void ParamList(): {/*@bgen(jjtree) ParamList */
  ASTParamList jjtn000 = new ASTParamList(JJTPARAMLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) ParamList */
    try {
/*@egen*/
    [(Type()  (<COLON> Type())*) | <VOID>]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        if (jjtree.nodeCreated()) {
         jjtreeCloseNodeScope(jjtn000);
        }
      }
    }
/*@egen*/
}

void ImportType()       : {/*@bgen(jjtree) Type */
                           ASTType jjtn000 = new ASTType(JJTTYPE);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
                           jjtreeOpenNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) Type */
   try {
/*@egen*/
   ((t = <INT> (<LEFT_BRACKET> <RIGHT_BRACKET> {jjtn000.isArray = true;})? )
   | t = <BOOLEAN> | t = <IDENTIFIER> | t = <STRING> | t=<VOID>)/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     if (jjtree.nodeCreated()) {
      jjtreeCloseNodeScope(jjtn000);
     }
   }
/*@egen*/
   { jjtn000.type = t.image; }/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       if (jjtree.nodeCreated()) {
        jjtreeCloseNodeScope(jjtn000);
       }
     }
   }
/*@egen*/
}

void VarDeclaration() : {/*@bgen(jjtree) VarDeclaration */
                         ASTVarDeclaration jjtn000 = new ASTVarDeclaration(JJTVARDECLARATION);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
                         jjtreeOpenNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) VarDeclaration */
    try {
/*@egen*/
    Type() t = <IDENTIFIER> <SEMICOLON>/*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn000, true);
                                          jjtc000 = false;
                                          if (jjtree.nodeCreated()) {
                                           jjtreeCloseNodeScope(jjtn000);
                                          }
                                        }
/*@egen*/ {jjtn000.name = t.image;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        if (jjtree.nodeCreated()) {
         jjtreeCloseNodeScope(jjtn000);
        }
      }
    }
/*@egen*/
}

void Type() : {/*@bgen(jjtree) Type */
               ASTType jjtn000 = new ASTType(JJTTYPE);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
               jjtreeOpenNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) Type */
   try {
/*@egen*/
   ((t = <INT> (<LEFT_BRACKET> <RIGHT_BRACKET> {jjtn000.isArray = true;})? )
   | t = <BOOLEAN> | t = <IDENTIFIER> | t = <STRING>)/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     if (jjtree.nodeCreated()) {
      jjtreeCloseNodeScope(jjtn000);
     }
   }
/*@egen*/
   { jjtn000.type = t.image; }/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       if (jjtree.nodeCreated()) {
        jjtreeCloseNodeScope(jjtn000);
       }
     }
   }
/*@egen*/
}

void MethodDeclaration()       : {Token t;} {
    <PUBLIC> 
    (/*@bgen(jjtree) MainDeclaration */
     {
       ASTMainDeclaration jjtn001 = new ASTMainDeclaration(JJTMAINDECLARATION);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtreeOpenNodeScope(jjtn001);
     }
     try {
/*@egen*/(<STATIC> <VOID> <MAIN>
    <LEFT_PARENTESIS> 
        <STRING> <LEFT_BRACKET> <RIGHT_BRACKET> t = <IDENTIFIER> {jjtn001.parametherName = t.image;}
    <RIGHT_PARENTESIS>
    <LEFT_BRACE> 
        (LOOKAHEAD(2) VarDeclaration())* 
        (Statement())*
    <RIGHT_BRACE>)/*@bgen(jjtree)*/
     } catch (Throwable jjte001) {
       if (jjtc001) {
         jjtree.clearNodeScope(jjtn001);
         jjtc001 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte001 instanceof RuntimeException) {
         throw (RuntimeException)jjte001;
       }
       if (jjte001 instanceof ParseException) {
         throw (ParseException)jjte001;
       }
       throw (Error)jjte001;
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         if (jjtree.nodeCreated()) {
          jjtreeCloseNodeScope(jjtn001);
         }
       }
     }
/*@egen*/                 
    |/*@bgen(jjtree) MethodDeclaration */
    {
      ASTMethodDeclaration jjtn003 = new ASTMethodDeclaration(JJTMETHODDECLARATION);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
      jjtreeOpenNodeScope(jjtn003);
    }
    try {
/*@egen*/
    (Type() t = <IDENTIFIER>
    <LEFT_PARENTESIS>
        (Paramethers())?
    <RIGHT_PARENTESIS>
    <LEFT_BRACE>
        (LOOKAHEAD(2) VarDeclaration())*
        (Statement())*/*@bgen(jjtree) Return */
        {
          ASTReturn jjtn002 = new ASTReturn(JJTRETURN);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
          jjtreeOpenNodeScope(jjtn002);
        }
        try {
/*@egen*/
        (<RETURN> Expression() <SEMICOLON>)/*@bgen(jjtree)*/
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            throw (RuntimeException)jjte002;
          }
          if (jjte002 instanceof ParseException) {
            throw (ParseException)jjte002;
          }
          throw (Error)jjte002;
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn002);
            }
          }
        }
/*@egen*/        
    <RIGHT_BRACE>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn003, true);
                    jjtc003 = false;
                    if (jjtree.nodeCreated()) {
                     jjtreeCloseNodeScope(jjtn003);
                    }
                  }
/*@egen*/ {jjtn003.name = t.image;} )/*@bgen(jjtree)*/
    } catch (Throwable jjte003) {
      if (jjtc003) {
        jjtree.clearNodeScope(jjtn003);
        jjtc003 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte003 instanceof RuntimeException) {
        throw (RuntimeException)jjte003;
      }
      if (jjte003 instanceof ParseException) {
        throw (ParseException)jjte003;
      }
      throw (Error)jjte003;
    } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003, true);
        if (jjtree.nodeCreated()) {
         jjtreeCloseNodeScope(jjtn003);
        }
      }
    }
/*@egen*/                    )

}

void Paramethers()       : {} {

    Arg() (<COLON> Arg())*
}

void Arg() : {/*@bgen(jjtree) Arg */
              ASTArg jjtn000 = new ASTArg(JJTARG);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);
              jjtreeOpenNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) Arg */
    try {
/*@egen*/ 
    
    Type() t=<IDENTIFIER>/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                            if (jjtree.nodeCreated()) {
                             jjtreeCloseNodeScope(jjtn000);
                            }
                          }
/*@egen*/ {jjtn000.val = t.image;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        if (jjtree.nodeCreated()) {
         jjtreeCloseNodeScope(jjtn000);
        }
      }
    }
/*@egen*/ 
}

void Statement()       : {} {/*@bgen(jjtree) StatementBlock */
    {
      ASTStatementBlock jjtn001 = new ASTStatementBlock(JJTSTATEMENTBLOCK);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
    }
    try {
/*@egen*/

    (<LEFT_BRACE> (Statement())* <RIGHT_BRACE> )/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        if (jjtree.nodeCreated()) {
         jjtreeCloseNodeScope(jjtn001);
        }
      }
    }
/*@egen*/                
    | If()
    | While()
    | (LOOKAHEAD(2) Equality() | (Expression() <SEMICOLON>) )
}

void Conditional()      : {} {
    <LEFT_PARENTESIS> Expression() <RIGHT_PARENTESIS>
}

void If() : {/*@bgen(jjtree) If */
  ASTIf jjtn000 = new ASTIf(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) If */
    try {
/*@egen*/
    <IF> 
        Conditional()
        Statement()
    <ELSE>
        Statement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        if (jjtree.nodeCreated()) {
         jjtreeCloseNodeScope(jjtn000);
        }
      }
    }
/*@egen*/
}

void While() : {/*@bgen(jjtree) While */
  ASTWhile jjtn000 = new ASTWhile(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) While */
    try {
/*@egen*/
    <WHILE> 
        try {
            Conditional()

        } catch (ParseException e) {
            errorHandling(e, RIGHT_PARENTESIS, LEFT_BRACE);
        }
        
        Statement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        if (jjtree.nodeCreated()) {
         jjtreeCloseNodeScope(jjtn000);
        }
      }
    }
/*@egen*/
}

void Equality() : {/*@bgen(jjtree) Equality */
                   ASTEquality jjtn000 = new ASTEquality(JJTEQUALITY);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
                   jjtreeOpenNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) Equality */
    try {
/*@egen*//*@bgen(jjtree) Identifier */
    {
      ASTIdentifier jjtn002 = new ASTIdentifier(JJTIDENTIFIER);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      jjtreeOpenNodeScope(jjtn002);
    }
    try {
/*@egen*/
    (t = <IDENTIFIER> {jjtn002.val = t.image;}
        (/*@bgen(jjtree) accessToArray */
         {
           ASTaccessToArray jjtn001 = new ASTaccessToArray(JJTACCESSTOARRAY);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtreeOpenNodeScope(jjtn001);
         }
         try {
/*@egen*/accessToArray()/*@bgen(jjtree)*/
         } catch (Throwable jjte001) {
           if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             throw (RuntimeException)jjte001;
           }
           if (jjte001 instanceof ParseException) {
             throw (ParseException)jjte001;
           }
           throw (Error)jjte001;
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             if (jjtree.nodeCreated()) {
              jjtreeCloseNodeScope(jjtn001);
             }
           }
         }
/*@egen*/               )? )/*@bgen(jjtree)*/
    } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        throw (RuntimeException)jjte002;
      }
      if (jjte002 instanceof ParseException) {
        throw (ParseException)jjte002;
      }
      throw (Error)jjte002;
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
        if (jjtree.nodeCreated()) {
         jjtreeCloseNodeScope(jjtn002);
        }
      }
    }
/*@egen*/            
        <ASSIGN> Expression() <SEMICOLON>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        if (jjtree.nodeCreated()) {
         jjtreeCloseNodeScope(jjtn000);
        }
      }
    }
/*@egen*/
}

void Expression()       : {} {

    AND()

}

 void AND()       : {} {
     LessThan() (LOOKAHEAD(2) <AND>/*@bgen(jjtree) #AND( 2) */
                                    {
                                      ASTAND jjtn001 = new ASTAND(JJTAND);
                                      boolean jjtc001 = true;
                                      jjtree.openNodeScope(jjtn001);
                                      jjtreeOpenNodeScope(jjtn001);
                                    }
                                    try {
/*@egen*/ LessThan()/*@bgen(jjtree)*/
                                    } catch (Throwable jjte001) {
                                      if (jjtc001) {
                                        jjtree.clearNodeScope(jjtn001);
                                        jjtc001 = false;
                                      } else {
                                        jjtree.popNode();
                                      }
                                      if (jjte001 instanceof RuntimeException) {
                                        throw (RuntimeException)jjte001;
                                      }
                                      if (jjte001 instanceof ParseException) {
                                        throw (ParseException)jjte001;
                                      }
                                      throw (Error)jjte001;
                                    } finally {
                                      if (jjtc001) {
                                        jjtree.closeNodeScope(jjtn001,  2);
                                        if (jjtree.nodeCreated()) {
                                         jjtreeCloseNodeScope(jjtn001);
                                        }
                                      }
                                    }
/*@egen*/        )*
 }

 void LessThan()       : {} {
     Sum() (LOOKAHEAD(2) <LESS_THAN>/*@bgen(jjtree) #LESSTHAN( 2) */
                                     {
                                       ASTLESSTHAN jjtn001 = new ASTLESSTHAN(JJTLESSTHAN);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
                                       jjtreeOpenNodeScope(jjtn001);
                                     }
                                     try {
/*@egen*/ Sum()/*@bgen(jjtree)*/
                                     } catch (Throwable jjte001) {
                                       if (jjtc001) {
                                         jjtree.clearNodeScope(jjtn001);
                                         jjtc001 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte001 instanceof RuntimeException) {
                                         throw (RuntimeException)jjte001;
                                       }
                                       if (jjte001 instanceof ParseException) {
                                         throw (ParseException)jjte001;
                                       }
                                       throw (Error)jjte001;
                                     } finally {
                                       if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001,  2);
                                         if (jjtree.nodeCreated()) {
                                          jjtreeCloseNodeScope(jjtn001);
                                         }
                                       }
                                     }
/*@egen*/             )*
 }

 void Sum()       : {} {
     Sub() (LOOKAHEAD(2) <SUM>/*@bgen(jjtree) #SUM( 2) */
                               {
                                 ASTSUM jjtn001 = new ASTSUM(JJTSUM);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
                                 jjtreeOpenNodeScope(jjtn001);
                               }
                               try {
/*@egen*/ Sub()/*@bgen(jjtree)*/
                               } catch (Throwable jjte001) {
                                 if (jjtc001) {
                                   jjtree.clearNodeScope(jjtn001);
                                   jjtc001 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte001 instanceof RuntimeException) {
                                   throw (RuntimeException)jjte001;
                                 }
                                 if (jjte001 instanceof ParseException) {
                                   throw (ParseException)jjte001;
                                 }
                                 throw (Error)jjte001;
                               } finally {
                                 if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001,  2);
                                   if (jjtree.nodeCreated()) {
                                    jjtreeCloseNodeScope(jjtn001);
                                   }
                                 }
                               }
/*@egen*/        )*
 }

 void Sub()       : {} {
      Mul() (LOOKAHEAD(2) <SUB>/*@bgen(jjtree) #SUB( 2) */
                                {
                                  ASTSUB jjtn001 = new ASTSUB(JJTSUB);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
                                  jjtreeOpenNodeScope(jjtn001);
                                }
                                try {
/*@egen*/ Mul()/*@bgen(jjtree)*/
                                } catch (Throwable jjte001) {
                                  if (jjtc001) {
                                    jjtree.clearNodeScope(jjtn001);
                                    jjtc001 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte001 instanceof RuntimeException) {
                                    throw (RuntimeException)jjte001;
                                  }
                                  if (jjte001 instanceof ParseException) {
                                    throw (ParseException)jjte001;
                                  }
                                  throw (Error)jjte001;
                                } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001,  2);
                                    if (jjtree.nodeCreated()) {
                                     jjtreeCloseNodeScope(jjtn001);
                                    }
                                  }
                                }
/*@egen*/        )*
  }

 void Mul()       : {} {
     Div() (LOOKAHEAD(2) <MUL>/*@bgen(jjtree) #MUL( 2) */
                               {
                                 ASTMUL jjtn001 = new ASTMUL(JJTMUL);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
                                 jjtreeOpenNodeScope(jjtn001);
                               }
                               try {
/*@egen*/ Div()/*@bgen(jjtree)*/
                               } catch (Throwable jjte001) {
                                 if (jjtc001) {
                                   jjtree.clearNodeScope(jjtn001);
                                   jjtc001 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte001 instanceof RuntimeException) {
                                   throw (RuntimeException)jjte001;
                                 }
                                 if (jjte001 instanceof ParseException) {
                                   throw (ParseException)jjte001;
                                 }
                                 throw (Error)jjte001;
                               } finally {
                                 if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001,  2);
                                   if (jjtree.nodeCreated()) {
                                    jjtreeCloseNodeScope(jjtn001);
                                   }
                                 }
                               }
/*@egen*/        )*
 }

 void Div()       : {} {
      DotExpression() (LOOKAHEAD(2) <DIV>/*@bgen(jjtree) #DIV( 2) */
                                          {
                                            ASTDIV jjtn001 = new ASTDIV(JJTDIV);
                                            boolean jjtc001 = true;
                                            jjtree.openNodeScope(jjtn001);
                                            jjtreeOpenNodeScope(jjtn001);
                                          }
                                          try {
/*@egen*/ DotExpression()/*@bgen(jjtree)*/
                                          } catch (Throwable jjte001) {
                                            if (jjtc001) {
                                              jjtree.clearNodeScope(jjtn001);
                                              jjtc001 = false;
                                            } else {
                                              jjtree.popNode();
                                            }
                                            if (jjte001 instanceof RuntimeException) {
                                              throw (RuntimeException)jjte001;
                                            }
                                            if (jjte001 instanceof ParseException) {
                                              throw (ParseException)jjte001;
                                            }
                                            throw (Error)jjte001;
                                          } finally {
                                            if (jjtc001) {
                                              jjtree.closeNodeScope(jjtn001,  2);
                                              if (jjtree.nodeCreated()) {
                                               jjtreeCloseNodeScope(jjtn001);
                                              }
                                            }
                                          }
/*@egen*/        )*
  }

void DotExpression()       : {Token t;} {
    FinalExpression() (LOOKAHEAD(2)/*@bgen(jjtree) #DotExpression( 2) */
                                    {
                                      ASTDotExpression jjtn002 = new ASTDotExpression(JJTDOTEXPRESSION);
                                      boolean jjtc002 = true;
                                      jjtree.openNodeScope(jjtn002);
                                      jjtreeOpenNodeScope(jjtn002);
                                    }
                                    try {
/*@egen*/ (/*@bgen(jjtree) Identifier */
                                     {
                                       ASTIdentifier jjtn001 = new ASTIdentifier(JJTIDENTIFIER);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
                                       jjtreeOpenNodeScope(jjtn001);
                                     }
                                     try {
/*@egen*/(<DOT> (t = <IDENTIFIER> | t = <LENGTH>) {jjtn001.val = t.image;}
                                  (<LEFT_PARENTESIS>
                                      (Expression() (<COLON> Expression())*)?
                                  <RIGHT_PARENTESIS>  {jjtn001.method = true;})?)/*@bgen(jjtree)*/
                                     } catch (Throwable jjte001) {
                                       if (jjtc001) {
                                         jjtree.clearNodeScope(jjtn001);
                                         jjtc001 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte001 instanceof RuntimeException) {
                                         throw (RuntimeException)jjte001;
                                       }
                                       if (jjte001 instanceof ParseException) {
                                         throw (ParseException)jjte001;
                                       }
                                       throw (Error)jjte001;
                                     } finally {
                                       if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001, true);
                                         if (jjtree.nodeCreated()) {
                                          jjtreeCloseNodeScope(jjtn001);
                                         }
                                       }
                                     }
/*@egen*/            )/*@bgen(jjtree)*/
                                    } catch (Throwable jjte002) {
                                      if (jjtc002) {
                                        jjtree.clearNodeScope(jjtn002);
                                        jjtc002 = false;
                                      } else {
                                        jjtree.popNode();
                                      }
                                      if (jjte002 instanceof RuntimeException) {
                                        throw (RuntimeException)jjte002;
                                      }
                                      if (jjte002 instanceof ParseException) {
                                        throw (ParseException)jjte002;
                                      }
                                      throw (Error)jjte002;
                                    } finally {
                                      if (jjtc002) {
                                        jjtree.closeNodeScope(jjtn002,  2);
                                        if (jjtree.nodeCreated()) {
                                         jjtreeCloseNodeScope(jjtn002);
                                        }
                                      }
                                    }
/*@egen*/                  )?
 }

void FinalExpression()       : {Token t;} {

    New()
    | (/*@bgen(jjtree) Identifier */
       {
         ASTIdentifier jjtn002 = new ASTIdentifier(JJTIDENTIFIER);
         boolean jjtc002 = true;
         jjtree.openNodeScope(jjtn002);
         jjtreeOpenNodeScope(jjtn002);
       }
       try {
/*@egen*/(t = <IDENTIFIER> {jjtn002.val = t.image;} (/*@bgen(jjtree) accessToArray */
                                                   {
                                                     ASTaccessToArray jjtn001 = new ASTaccessToArray(JJTACCESSTOARRAY);
                                                     boolean jjtc001 = true;
                                                     jjtree.openNodeScope(jjtn001);
                                                     jjtreeOpenNodeScope(jjtn001);
                                                   }
                                                   try {
/*@egen*/accessToArray()/*@bgen(jjtree)*/
                                                   } catch (Throwable jjte001) {
                                                     if (jjtc001) {
                                                       jjtree.clearNodeScope(jjtn001);
                                                       jjtc001 = false;
                                                     } else {
                                                       jjtree.popNode();
                                                     }
                                                     if (jjte001 instanceof RuntimeException) {
                                                       throw (RuntimeException)jjte001;
                                                     }
                                                     if (jjte001 instanceof ParseException) {
                                                       throw (ParseException)jjte001;
                                                     }
                                                     throw (Error)jjte001;
                                                   } finally {
                                                     if (jjtc001) {
                                                       jjtree.closeNodeScope(jjtn001, true);
                                                       if (jjtree.nodeCreated()) {
                                                        jjtreeCloseNodeScope(jjtn001);
                                                       }
                                                     }
                                                   }
/*@egen*/               )? )/*@bgen(jjtree)*/
       } catch (Throwable jjte002) {
         if (jjtc002) {
           jjtree.clearNodeScope(jjtn002);
           jjtc002 = false;
         } else {
           jjtree.popNode();
         }
         if (jjte002 instanceof RuntimeException) {
           throw (RuntimeException)jjte002;
         }
         if (jjte002 instanceof ParseException) {
           throw (ParseException)jjte002;
         }
         throw (Error)jjte002;
       } finally {
         if (jjtc002) {
           jjtree.closeNodeScope(jjtn002, true);
           if (jjtree.nodeCreated()) {
            jjtreeCloseNodeScope(jjtn002);
           }
         }
       }
/*@egen*/            )
    | (t = <THIS>/*@bgen(jjtree) Identifier */
                  {
                    ASTIdentifier jjtn003 = new ASTIdentifier(JJTIDENTIFIER);
                    boolean jjtc003 = true;
                    jjtree.openNodeScope(jjtn003);
                    jjtreeOpenNodeScope(jjtn003);
                  }
                  try {
/*@egen*//*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn003, true);
                    jjtc003 = false;
                    if (jjtree.nodeCreated()) {
                     jjtreeCloseNodeScope(jjtn003);
                    }
                  }
/*@egen*/ {jjtn003.val = t.image;}/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc003) {
                      jjtree.closeNodeScope(jjtn003, true);
                      if (jjtree.nodeCreated()) {
                       jjtreeCloseNodeScope(jjtn003);
                      }
                    }
                  }
/*@egen*/            )
    | ((t = <TRUE_> | t = <FALSE_>)/*@bgen(jjtree) Boolean */
                                    {
                                      ASTBoolean jjtn004 = new ASTBoolean(JJTBOOLEAN);
                                      boolean jjtc004 = true;
                                      jjtree.openNodeScope(jjtn004);
                                      jjtreeOpenNodeScope(jjtn004);
                                    }
                                    try {
/*@egen*//*@bgen(jjtree)*/
                                    {
                                      jjtree.closeNodeScope(jjtn004, true);
                                      jjtc004 = false;
                                      if (jjtree.nodeCreated()) {
                                       jjtreeCloseNodeScope(jjtn004);
                                      }
                                    }
/*@egen*/ {jjtn004.val = t.image.equals("true") ;}/*@bgen(jjtree)*/
                                    } finally {
                                      if (jjtc004) {
                                        jjtree.closeNodeScope(jjtn004, true);
                                        if (jjtree.nodeCreated()) {
                                         jjtreeCloseNodeScope(jjtn004);
                                        }
                                      }
                                    }
/*@egen*/         )
    | ( t= <INTEGER_LITERAL>/*@bgen(jjtree) Literal */
                             {
                               ASTLiteral jjtn005 = new ASTLiteral(JJTLITERAL);
                               boolean jjtc005 = true;
                               jjtree.openNodeScope(jjtn005);
                               jjtreeOpenNodeScope(jjtn005);
                             }
                             try {
/*@egen*//*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn005, true);
                               jjtc005 = false;
                               if (jjtree.nodeCreated()) {
                                jjtreeCloseNodeScope(jjtn005);
                               }
                             }
/*@egen*/ {jjtn005.val = t.image;}/*@bgen(jjtree)*/
                             } finally {
                               if (jjtc005) {
                                 jjtree.closeNodeScope(jjtn005, true);
                                 if (jjtree.nodeCreated()) {
                                  jjtreeCloseNodeScope(jjtn005);
                                 }
                               }
                             }
/*@egen*/         )
    |/*@bgen(jjtree) Negation */
      {
        ASTNegation jjtn006 = new ASTNegation(JJTNEGATION);
        boolean jjtc006 = true;
        jjtree.openNodeScope(jjtn006);
        jjtreeOpenNodeScope(jjtn006);
      }
      try {
/*@egen*/ ( <NEGATION> DotExpression() )/*@bgen(jjtree)*/
      } catch (Throwable jjte006) {
        if (jjtc006) {
          jjtree.clearNodeScope(jjtn006);
          jjtc006 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte006 instanceof RuntimeException) {
          throw (RuntimeException)jjte006;
        }
        if (jjte006 instanceof ParseException) {
          throw (ParseException)jjte006;
        }
        throw (Error)jjte006;
      } finally {
        if (jjtc006) {
          jjtree.closeNodeScope(jjtn006, true);
          if (jjtree.nodeCreated()) {
           jjtreeCloseNodeScope(jjtn006);
          }
        }
      }
/*@egen*/          
    | ( <LEFT_PARENTESIS> Expression() <RIGHT_PARENTESIS>)
}

void New()       : {} {
     <NEW> ( InitializeArray() | NewObject() )
}

void InitializeArray() : {/*@bgen(jjtree) InitializeArray */
  ASTInitializeArray jjtn000 = new ASTInitializeArray(JJTINITIALIZEARRAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) InitializeArray */
    try {
/*@egen*/
    <INT> accessToArray()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        if (jjtree.nodeCreated()) {
         jjtreeCloseNodeScope(jjtn000);
        }
      }
    }
/*@egen*/
}

void NewObject() : {/*@bgen(jjtree) NewObject */
                    ASTNewObject jjtn000 = new ASTNewObject(JJTNEWOBJECT);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
                    jjtreeOpenNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) NewObject */
    try {
/*@egen*/
    t = <IDENTIFIER> <LEFT_PARENTESIS> (Expression() (<COLON> Expression())*)? <RIGHT_PARENTESIS>/*@bgen(jjtree)*/
                                                                                                  {
                                                                                                    jjtree.closeNodeScope(jjtn000, true);
                                                                                                    jjtc000 = false;
                                                                                                    if (jjtree.nodeCreated()) {
                                                                                                     jjtreeCloseNodeScope(jjtn000);
                                                                                                    }
                                                                                                  }
/*@egen*/ {jjtn000.val = t.image;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        if (jjtree.nodeCreated()) {
         jjtreeCloseNodeScope(jjtn000);
        }
      }
    }
/*@egen*/
}

void accessToArray()       : {} {

    <LEFT_BRACKET> Expression() <RIGHT_BRACKET>

}