/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. calculator.jj */
/*@egen*/options
{
    LOOKAHEAD=1;
}

PARSER_BEGIN(calculator)



public class calculator/*@bgen(jjtree)*/implements calculatorTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTcalculatorState jjtree = new JJTcalculatorState();

/*@egen*/
    public static void main(String args[]) throws ParseException {
        System.out.println("Parser for a calculator with integers and -, +, *, /, ( and )");
        System.out.println("Write an aritmetic expression: ");
        calculator mycalc = new calculator(System.in);
        SimpleNode root = mycalc.Expression();

        root.dump("");
        System.out.println("Espression value: "+mycalc.eval(root));
       
    }

    int eval(SimpleNode node) {
if(node.jjtGetNumChildren() == 0) // leaf node with integer value
return node.val;
else if(node.jjtGetNumChildren() == 1) // only one child
return this.eval((SimpleNode) node.jjtGetChild(0));
SimpleNode lhs = (SimpleNode) node.jjtGetChild(0); //left child
SimpleNode rhs = (SimpleNode) node.jjtGetChild(1); // right child
switch(node.Op) {
 case MyConstants.ADD : return eval( lhs ) + eval( rhs );
 case MyConstants.SUB : return eval( lhs ) - eval( rhs );
 case MyConstants.MUL : return eval( lhs ) * eval( rhs );
 case MyConstants.DIV : return eval( lhs ) / eval( rhs );
 default : // abort
System.out.println("Ilegal operator!");
System.exit(1);
}
return 0;
}
}


PARSER_END(calculator)

SKIP :
{
    "" | "\r" | "\t"
}

TOKEN :
{
    < INTEGER: (["0"-"9"])+ > | < LF: "\n" >
}

SimpleNode Expression(): {/*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expression */
    try {
/*@egen*/
    Expr1() <LF>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Expr1(): {/*@bgen(jjtree) Expr1 */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPR1);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expr1 */
    try {
/*@egen*/
    Expr2(1) 
    [
        ("+" {jjtn000.Op = MyConstants.ADD;}
        | "-" {jjtn000.Op = MyConstants.SUB;}
        )
        Expr2(1)
    ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Expr2(int sign): {/*@bgen(jjtree) Expr2 */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPR2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expr2 */
    try {
/*@egen*/
    Expr3(sign) 
    [
        ("*" {jjtn000.Op = MyConstants.MUL;}
        | "/" {jjtn000.Op = MyConstants.DIV;}
        )
        Expr3(1)
    ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Expr3(int sign): {/*@bgen(jjtree) Expr3 */
                       SimpleNode jjtn000 = new SimpleNode(JJTEXPR3);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Expr3 */
    try {
/*@egen*/
    t = <INTEGER>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ 
    {
        jjtn000.val = sign *Integer.parseInt(t.image);
    }
    | "-" Expr3(-1) 
    | "(" Expr1() ")"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}